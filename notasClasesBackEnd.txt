SQL -->  EXTRICTO , INFO RELACIONADA ENTRE SI 
NOSQL --> LIVIANOS, DOCUMENTOS Q PUEDEN O NO ESTAR RELACIONADOS , MUCHOS DATOS , Y CONSULTAS RAPIDAS


MONGODB (NOSQL) ALMACENA BIG DATA

EXPRESS JS --> FRAMEWORK CREAR APLICACIONES WEB EN MENOS TIEMPO , 
ADMINITRAR ARCHIVOS , OPTIMIZAR RUTAMIENTO , COKIES

REACT JS LIBRERIA 

NODE JS --> MANEJAR JS EN EL SERVIDOR 

MERN ===> (MONGO EXPRES REACT NODE)

===================================
con node nombrearchivo.js compila 


apartir de Es6 no se usa var , nos diminuye el scope 



-------------------------------------------------------
CALLBACK => Un callback es una función que se envía como argumento a otra función.
El callback siempre es el último parámetro.

PROMESA => Una Promesa es un objeto que encapsula una operación, 
y que permite definir acciones a tomar luego de finalizada dicha operación
-------------------------------------------------------------
Ejecución Sincrónica: debe finalizar una función para poder continuar con la otra.

*A las operaciones que obligan al programa a esperar a que 
	se finalicen antes de pasar a ejecutar la siguiente instrucción se las conoce como bloqueantes. 
	Este tipo de operaciones permiten que el programa se comporte de la manera más intuitiva.
*Permiten la ejecución de una sola operación en simultáneo.
*A este tipo de ejecución se la conoce como sincrónica. 

Ejecución Asincrónica: sólo sabemos en qué orden comenzarán su ejecución las instrucciones,
pero no sabemos en qué momento ni en qué orden terminarán de ejecutarse. 
*Este tipo de operaciones permiten que, una vez iniciadas, 
	el programa pueda continuar con la siguiente instrucción, sin esperar a que finalice la anterior. 
*Permite la ejecución de varias operaciones en paralelo, sucediendo al mismo tiempo. 
*A este tipo de ejecución se la conoce como asincrónica.

----------------------------------------------------------------------

setTimeout: Es una función nativa, no hace falta importarla.
La función setTimeout() recibe un callback, y lo ejecuta después de un número específico de milisegundos.
Trabaja sobre un modelo asincrónico no bloqueante

setInterval : La función setInterval() también recibe un callback, pero a diferencia de setTimeout() lo ejecuta una
 y otra vez cada vez que se cumple la cantidad de milisegundos indicada.


----------------------------------------------
las piramides de la muerte se solucionan con promesas
aaaaaaaa
	aaaaaaaa
		aaaaaaaa
			aaaaaaa
				aaaaaaa (esto es una piramide de la muerte)



------------------------------------------------------
NODE JS 
*Node.js es un entorno de tiempo de ejecución de JavaScript.
*Node.js fue creado por los desarrolladores originales de JavaScript 
	e incluye todo lo que se necesita para ejecutar un programa escrito en JavaScript por fuera del navegador.


NPM => administrador de paquetes, tiene muchas librerias, entonces vos instalas npm y ya tenes muchas ahi
no necesitas instalar todas 

josn. 
{
  "name": "proyectonode",
  "version": "1.0.0",
  "description": "",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": { 
    "left-pad": "^1.3.0"
  }
} devDependencies son los paquetes q instale en este caso el left-pad(le agrega espacios a la izquierda) 

 los * ^ ~ estos simbolos nos dicen que se actualiza y cuando cada uno depende del paquete, * ejemplo este actualiza si hay una version mejor 


================================================
Servidor Web 
Express

HTTP es un modulo de node.js , trabaja con el protocolo http 
nos sirve para crear un servidor HTTP q acepte solicitudes desde un cliente 
para poder usarlo hay q requerirlo de la siguiente manera ==> require('http')

para que se usa? para abrir un servicio web

// request = peticion , response = respuesta
el request responde con una pagina web o lo q nosotros querramos 

con response.end ==> retorna 

express ==>  facilitará la tarea de crear los distintos puntos de entrada de nuestro servidor.
npm init
npm install express

https://expressjs.com/en/api.html doc 


========================================================
EXPRESS , RESTful , POSTMAN , HTTP 

Aplicacion Restful ==>  aplicaciones q operan en servicios web , responden consultas a traves de internet
(respetan reglas y convenciones)

protocolo HTTP ==>  hypertext transfer protocol

intercambiar datos atraves de internet 

peticiones => post , get(desde la url) , put , delete 

etapas => peticion , devuelve una respuesta , y el navegador lo transforma para q el usuario lo vea

peticion resultado => el estado(codigo) : 
*100-199 => peticion recibida
*200-299 => exito
*300-399 => redireccion
*400-499 => error cliente
*500-599 => error server (graves, errores de codigo de programador)


codigos mas comunes => 200 OK , 400 Bad Request , 404 Not Found , 500 Internal Server Error

Una API es un conjunto de reglas y especificaciones que describen la manera en que un sistema puede comunicarse con otros.
La API puede tener interfaz gráfica o ser de uso interno.
La API tiene que estar acompañada con la documentación detallada que describa su operación y el formato de interacción con la misma.


REST viene del inglés “REpresentational State Transfer” (o en español: Transferencia de Estado Representacional).
Transferir un Estado de Representación implica el envío de datos (con una determinada estructura) entre dos partes.
Los dos formatos más utilizados para este tipo de transferencias de datos son XML y JSON.

APIREST
Es un tipo de API que no dispone de interfaz gráfica.
Se utiliza exclusivamente para comunicación entre sistemas, mediante el protocolo HTTP.

Requisitps para q una api se considere Rest:
*Arquitectura Cliente-Servidor sin estado 
*Cacheable
*Operaciones comunes 
*Interfaz uniforme 
*Utilización de hipermedios

Una aplicación RESTful requiere un enfoque de diseño distinto a la forma típica de pensar en un sistema: lo contrario a RPC
RPC (Remote Procedure Calls, llamadas a procedimientos remotos) basa su funcionamiento en las operaciones que puede realizar el sistema (acciones, usualmente verbos). Ej: getUsuario()
En REST, por el contrario, el énfasis se pone en los recursos (usualmente sustantivos), especialmente en los nombres que se le asigna a cada tipo de recurso. Ej. Usuarios.
Cada funcionalidad relacionada con este recurso tendría sus propios identificadores y peticiones en HTTP.



------------
Router en Express 
El Router de express nos permite crear múltiples "mini aplicaciones" para que se pueda asignar un espacio de nombre al api público, autenticación y otras rutas en sistemas de enrutamiento separados.

Servicio de estaticos

==========================================================================================
Websocket (comunicacion bidireccional)
El protocolo TCP establece conexiones entre dos puntos finales de comunicación, llamados sockets.
De esta manera, el intercambio de datos puede producirse en las dos direcciones.
Websocket permite una comunicación directa y en tiempo real entre una aplicación web y un servidor Websocket.

